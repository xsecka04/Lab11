#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab11
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHodnoceni(Hodnoceni instance);
    partial void UpdateHodnoceni(Hodnoceni instance);
    partial void DeleteHodnoceni(Hodnoceni instance);
    partial void InsertStudentPredmet(StudentPredmet instance);
    partial void UpdateStudentPredmet(StudentPredmet instance);
    partial void DeleteStudentPredmet(StudentPredmet instance);
    partial void InsertPredmet(Predmet instance);
    partial void UpdatePredmet(Predmet instance);
    partial void DeletePredmet(Predmet instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Lab11.Properties.Settings.Default.DatabaseConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Hodnoceni> Hodnocenis
		{
			get
			{
				return this.GetTable<Hodnoceni>();
			}
		}
		
		public System.Data.Linq.Table<StudentPredmet> StudentPredmets
		{
			get
			{
				return this.GetTable<StudentPredmet>();
			}
		}
		
		public System.Data.Linq.Table<Predmet> Predmets
		{
			get
			{
				return this.GetTable<Predmet>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hodnoceni")]
	public partial class Hodnoceni : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdStudent;
		
		private string _ZkratkaPredmet;
		
		private System.DateTime _Datum;
		
		private double _Znamka;
		
		private EntityRef<Predmet> _Predmet;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdStudentChanging(int value);
    partial void OnIdStudentChanged();
    partial void OnZkratkaPredmetChanging(string value);
    partial void OnZkratkaPredmetChanged();
    partial void OnDatumChanging(System.DateTime value);
    partial void OnDatumChanged();
    partial void OnZnamkaChanging(double value);
    partial void OnZnamkaChanged();
    #endregion
		
		public Hodnoceni()
		{
			this._Predmet = default(EntityRef<Predmet>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStudent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdStudent
		{
			get
			{
				return this._IdStudent;
			}
			set
			{
				if ((this._IdStudent != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStudentChanging(value);
					this.SendPropertyChanging();
					this._IdStudent = value;
					this.SendPropertyChanged("IdStudent");
					this.OnIdStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZkratkaPredmet", DbType="NChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ZkratkaPredmet
		{
			get
			{
				return this._ZkratkaPredmet;
			}
			set
			{
				if ((this._ZkratkaPredmet != value))
				{
					if (this._Predmet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZkratkaPredmetChanging(value);
					this.SendPropertyChanging();
					this._ZkratkaPredmet = value;
					this.SendPropertyChanged("ZkratkaPredmet");
					this.OnZkratkaPredmetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datum", DbType="Date NOT NULL")]
		public System.DateTime Datum
		{
			get
			{
				return this._Datum;
			}
			set
			{
				if ((this._Datum != value))
				{
					this.OnDatumChanging(value);
					this.SendPropertyChanging();
					this._Datum = value;
					this.SendPropertyChanged("Datum");
					this.OnDatumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Znamka", DbType="Float NOT NULL")]
		public double Znamka
		{
			get
			{
				return this._Znamka;
			}
			set
			{
				if ((this._Znamka != value))
				{
					this.OnZnamkaChanging(value);
					this.SendPropertyChanging();
					this._Znamka = value;
					this.SendPropertyChanged("Znamka");
					this.OnZnamkaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Predmet_Hodnoceni", Storage="_Predmet", ThisKey="ZkratkaPredmet", OtherKey="Zkratka", IsForeignKey=true)]
		public Predmet Predmet
		{
			get
			{
				return this._Predmet.Entity;
			}
			set
			{
				Predmet previousValue = this._Predmet.Entity;
				if (((previousValue != value) 
							|| (this._Predmet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Predmet.Entity = null;
						previousValue.Hodnocenis.Remove(this);
					}
					this._Predmet.Entity = value;
					if ((value != null))
					{
						value.Hodnocenis.Add(this);
						this._ZkratkaPredmet = value.Zkratka;
					}
					else
					{
						this._ZkratkaPredmet = default(string);
					}
					this.SendPropertyChanged("Predmet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Hodnoceni", Storage="_Student", ThisKey="IdStudent", OtherKey="Id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.Hodnocenis.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.Hodnocenis.Add(this);
						this._IdStudent = value.Id;
					}
					else
					{
						this._IdStudent = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentPredmet")]
	public partial class StudentPredmet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdStudent;
		
		private string _ZkratkaPredmet;
		
		private EntityRef<Predmet> _Predmet;
		
		private EntityRef<Student> _Student;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdStudentChanging(int value);
    partial void OnIdStudentChanged();
    partial void OnZkratkaPredmetChanging(string value);
    partial void OnZkratkaPredmetChanged();
    #endregion
		
		public StudentPredmet()
		{
			this._Predmet = default(EntityRef<Predmet>);
			this._Student = default(EntityRef<Student>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdStudent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdStudent
		{
			get
			{
				return this._IdStudent;
			}
			set
			{
				if ((this._IdStudent != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdStudentChanging(value);
					this.SendPropertyChanging();
					this._IdStudent = value;
					this.SendPropertyChanged("IdStudent");
					this.OnIdStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZkratkaPredmet", DbType="NChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ZkratkaPredmet
		{
			get
			{
				return this._ZkratkaPredmet;
			}
			set
			{
				if ((this._ZkratkaPredmet != value))
				{
					if (this._Predmet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZkratkaPredmetChanging(value);
					this.SendPropertyChanging();
					this._ZkratkaPredmet = value;
					this.SendPropertyChanged("ZkratkaPredmet");
					this.OnZkratkaPredmetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Predmet_StudentPredmet", Storage="_Predmet", ThisKey="ZkratkaPredmet", OtherKey="Zkratka", IsForeignKey=true)]
		public Predmet Predmet
		{
			get
			{
				return this._Predmet.Entity;
			}
			set
			{
				Predmet previousValue = this._Predmet.Entity;
				if (((previousValue != value) 
							|| (this._Predmet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Predmet.Entity = null;
						previousValue.StudentPredmets.Remove(this);
					}
					this._Predmet.Entity = value;
					if ((value != null))
					{
						value.StudentPredmets.Add(this);
						this._ZkratkaPredmet = value.Zkratka;
					}
					else
					{
						this._ZkratkaPredmet = default(string);
					}
					this.SendPropertyChanged("Predmet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentPredmet", Storage="_Student", ThisKey="IdStudent", OtherKey="Id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentPredmets.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentPredmets.Add(this);
						this._IdStudent = value.Id;
					}
					else
					{
						this._IdStudent = default(int);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Predmet")]
	public partial class Predmet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Zkratka;
		
		private string _Nazev;
		
		private EntitySet<Hodnoceni> _Hodnocenis;
		
		private EntitySet<StudentPredmet> _StudentPredmets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZkratkaChanging(string value);
    partial void OnZkratkaChanged();
    partial void OnNazevChanging(string value);
    partial void OnNazevChanged();
    #endregion
		
		public Predmet()
		{
			this._Hodnocenis = new EntitySet<Hodnoceni>(new Action<Hodnoceni>(this.attach_Hodnocenis), new Action<Hodnoceni>(this.detach_Hodnocenis));
			this._StudentPredmets = new EntitySet<StudentPredmet>(new Action<StudentPredmet>(this.attach_StudentPredmets), new Action<StudentPredmet>(this.detach_StudentPredmets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zkratka", DbType="NChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Zkratka
		{
			get
			{
				return this._Zkratka;
			}
			set
			{
				if ((this._Zkratka != value))
				{
					this.OnZkratkaChanging(value);
					this.SendPropertyChanging();
					this._Zkratka = value;
					this.SendPropertyChanged("Zkratka");
					this.OnZkratkaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nazev", DbType="NVarChar(MAX)")]
		public string Nazev
		{
			get
			{
				return this._Nazev;
			}
			set
			{
				if ((this._Nazev != value))
				{
					this.OnNazevChanging(value);
					this.SendPropertyChanging();
					this._Nazev = value;
					this.SendPropertyChanged("Nazev");
					this.OnNazevChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Predmet_Hodnoceni", Storage="_Hodnocenis", ThisKey="Zkratka", OtherKey="ZkratkaPredmet")]
		public EntitySet<Hodnoceni> Hodnocenis
		{
			get
			{
				return this._Hodnocenis;
			}
			set
			{
				this._Hodnocenis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Predmet_StudentPredmet", Storage="_StudentPredmets", ThisKey="Zkratka", OtherKey="ZkratkaPredmet")]
		public EntitySet<StudentPredmet> StudentPredmets
		{
			get
			{
				return this._StudentPredmets;
			}
			set
			{
				this._StudentPredmets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hodnocenis(Hodnoceni entity)
		{
			this.SendPropertyChanging();
			entity.Predmet = this;
		}
		
		private void detach_Hodnocenis(Hodnoceni entity)
		{
			this.SendPropertyChanging();
			entity.Predmet = null;
		}
		
		private void attach_StudentPredmets(StudentPredmet entity)
		{
			this.SendPropertyChanging();
			entity.Predmet = this;
		}
		
		private void detach_StudentPredmets(StudentPredmet entity)
		{
			this.SendPropertyChanging();
			entity.Predmet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Jmeno;
		
		private string _Prijmeni;
		
		private System.DateTime _DatumNarozeni;
		
		private EntitySet<Hodnoceni> _Hodnocenis;
		
		private EntitySet<StudentPredmet> _StudentPredmets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJmenoChanging(string value);
    partial void OnJmenoChanged();
    partial void OnPrijmeniChanging(string value);
    partial void OnPrijmeniChanged();
    partial void OnDatumNarozeniChanging(System.DateTime value);
    partial void OnDatumNarozeniChanged();
    #endregion
		
		public Student()
		{
			this._Hodnocenis = new EntitySet<Hodnoceni>(new Action<Hodnoceni>(this.attach_Hodnocenis), new Action<Hodnoceni>(this.detach_Hodnocenis));
			this._StudentPredmets = new EntitySet<StudentPredmet>(new Action<StudentPredmet>(this.attach_StudentPredmets), new Action<StudentPredmet>(this.detach_StudentPredmets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Jmeno", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Jmeno
		{
			get
			{
				return this._Jmeno;
			}
			set
			{
				if ((this._Jmeno != value))
				{
					this.OnJmenoChanging(value);
					this.SendPropertyChanging();
					this._Jmeno = value;
					this.SendPropertyChanged("Jmeno");
					this.OnJmenoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prijmeni", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Prijmeni
		{
			get
			{
				return this._Prijmeni;
			}
			set
			{
				if ((this._Prijmeni != value))
				{
					this.OnPrijmeniChanging(value);
					this.SendPropertyChanging();
					this._Prijmeni = value;
					this.SendPropertyChanged("Prijmeni");
					this.OnPrijmeniChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatumNarozeni", DbType="Date NOT NULL")]
		public System.DateTime DatumNarozeni
		{
			get
			{
				return this._DatumNarozeni;
			}
			set
			{
				if ((this._DatumNarozeni != value))
				{
					this.OnDatumNarozeniChanging(value);
					this.SendPropertyChanging();
					this._DatumNarozeni = value;
					this.SendPropertyChanged("DatumNarozeni");
					this.OnDatumNarozeniChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Hodnoceni", Storage="_Hodnocenis", ThisKey="Id", OtherKey="IdStudent")]
		public EntitySet<Hodnoceni> Hodnocenis
		{
			get
			{
				return this._Hodnocenis;
			}
			set
			{
				this._Hodnocenis.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentPredmet", Storage="_StudentPredmets", ThisKey="Id", OtherKey="IdStudent")]
		public EntitySet<StudentPredmet> StudentPredmets
		{
			get
			{
				return this._StudentPredmets;
			}
			set
			{
				this._StudentPredmets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hodnocenis(Hodnoceni entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_Hodnocenis(Hodnoceni entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
		
		private void attach_StudentPredmets(StudentPredmet entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentPredmets(StudentPredmet entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
}
#pragma warning restore 1591
